(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{625:function(e,t,a){"use strict";a.r(t);var s=a(24),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"spring-mvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[e._v("#")]),e._v(" Spring MVC")]),e._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),a("ul",[a("li",[e._v("转发与重定向页面字符串不经过视图解析器处理，无拼串过程；其中"),a("code",[e._v("/")]),e._v("表示项目根路径")]),e._v(" "),a("li",[e._v("视图对象是无状态的，因此不会有线程安全问题")])]),e._v(" "),a("h4",{attrs:{id:"bindingawaremodelmap-隐含模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bindingawaremodelmap-隐含模型"}},[e._v("#")]),e._v(" "),a("code",[e._v("BindingAwareModelMap")]),e._v("（“隐含模型”）")]),e._v(" "),a("ul",[a("li",[e._v("控制器方法的返回值可以为"),a("code",[e._v("ModelAndView")]),e._v("类型，该对象既包含视图信息，又包含模型数据信息，其中模型数据信息置于"),a("code",[e._v("request")]),e._v("域中\n"),a("ul",[a("li",[e._v("在"),a("code",[e._v("Controller")]),e._v("类上标注"),a("code",[e._v("@SessionAttributes")]),e._v("注解，可将（"),a("code",[e._v("value")]),e._v("或"),a("code",[e._v("type")]),e._v("属性指定的）模型数据信息置于**"),a("code",[e._v("request")]),e._v("域以及"),a("code",[e._v("session")]),e._v("域**中")])])]),e._v(" "),a("li",[a("code",[e._v("@ModelAttribute")]),e._v("标注的方法在控制器方法前运行，与控制器方法共享同一个"),a("code",[e._v("BindingAwareModelMap")]),e._v("对象")])]),e._v(" "),a("h3",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[e._v("#")]),e._v(" 注意事项")]),e._v(" "),a("h5",{attrs:{id:"controller获取前端传入的请求参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller获取前端传入的请求参数"}},[e._v("#")]),e._v(" Controller获取前端传入的请求参数")]),e._v(" "),a("h6",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" "),a("code",[e._v("GET")])]),e._v(" "),a("h6",{attrs:{id:"post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[e._v("#")]),e._v(" "),a("code",[e._v("POST")])]),e._v(" "),a("p",[a("code",[e._v("application/json")]),e._v("：使用"),a("code",[e._v("@RequestBody")]),a("strong",[e._v("对象")]),e._v("接收")]),e._v(" "),a("p",[a("code",[e._v("x-www-form-urlencoded")]),e._v("：使用"),a("code",[e._v("HttpServletRequest")]),e._v("获取请求参数，亦可直接使用POJO、"),a("code",[e._v("@RequestBody")]),a("strong",[e._v("字符串")]),e._v("，或"),a("code",[e._v("HttpEntity<T>")]),e._v("对象（可以获取所有请求头）接收")]),e._v(" "),a("h5",{attrs:{id:"数据格式化与数据校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据格式化与数据校验"}},[e._v("#")]),e._v(" 数据格式化与数据校验")]),e._v(" "),a("ul",[a("li",[e._v("在POJO字段上添加格式规则注解")]),e._v(" "),a("li",[e._v("使用JSR 303实现类，在POJO字段上添加校验规则注解，在"),a("code",[e._v("Controller")]),e._v("方法入参处添加"),a("code",[e._v("@Valid")]),e._v("/"),a("code",[e._v("@Validated")]),e._v("注解（标注该注解的入参后紧跟"),a("code",[e._v("BindingResult")]),e._v("对象，封装校验结果）")])]),e._v(" "),a("h5",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[e._v("#")]),e._v(" 异常处理")]),e._v(" "),a("h5",{attrs:{id:"handlerexceptionresolver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#handlerexceptionresolver"}},[e._v("#")]),e._v(" "),a("code",[e._v("HandlerExceptionResolver")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ExceptionHandlerExceptionResolver")])]),e._v(" "),a("li",[a("code",[e._v("ResponseStatusExceptionResolver")])]),e._v(" "),a("li",[a("code",[e._v("DefaultHandlerExceptionResolver")]),e._v(" 处理部分预设异常")])]),e._v(" "),a("h5",{attrs:{id:"支持restful请求方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持restful请求方法"}},[e._v("#")]),e._v(" 支持RESTful请求方法")]),e._v(" "),a("p",[e._v("配置"),a("code",[e._v("HiddenHttpMethodFilter")])]),e._v(" "),a("p",[e._v("前端携带"),a("code",[e._v("_method")]),e._v("参数，参数值为"),a("code",[e._v("delete")]),e._v("或"),a("code",[e._v("put")]),e._v("（在过滤器中统一转为大写）")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("HttpMethodRequestWrapper")]),e._v("重写了父类"),a("code",[e._v("HttpServletRequest")]),e._v("的"),a("code",[e._v("getMethod()")]),e._v("方法，将传入的（而非request本身的）方法参数封装为新的请求方法对外返回")])]),e._v(" "),a("h2",{attrs:{id:"请求处理流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求处理流程"}},[e._v("#")]),e._v(" 请求处理流程")]),e._v(" "),a("h4",{attrs:{id:"spring-mvc九大组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc九大组件"}},[e._v("#")]),e._v(" Spring MVC九大组件")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("MultipartResolver")])]),e._v(" "),a("li",[a("code",[e._v("LocaleResolver")])]),e._v(" "),a("li",[a("code",[e._v("ThemeResolver")])]),e._v(" "),a("li",[a("code",[e._v("HandlerMapping")]),e._v("集合")]),e._v(" "),a("li",[a("code",[e._v("HandlerAdapter")]),e._v("集合")]),e._v(" "),a("li",[a("code",[e._v("HandlerExceptionResolver")]),e._v("集合")]),e._v(" "),a("li",[a("code",[e._v("ThemeResolver")])]),e._v(" "),a("li",[a("code",[e._v("RequestToViewNameTranslator")])]),e._v(" "),a("li",[a("code",[e._v("FlashMapManager")])]),e._v(" "),a("li",[a("code",[e._v("ViewResolver")]),e._v("集合")])]),e._v(" "),a("h4",{attrs:{id:"处理器处理请求映射及视图解析器解析页面字符串流程-spring-4-x旧版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理器处理请求映射及视图解析器解析页面字符串流程-spring-4-x旧版本"}},[e._v("#")]),e._v(" 处理器处理请求映射及视图解析器解析页面字符串流程（Spring 4.x旧版本）")]),e._v(" "),a("ol",[a("li",[e._v("客户端（浏览器）发送请求，最终请求至 "),a("code",[e._v("DispatcherServlet")])]),e._v(" "),a("li",[a("code",[e._v("DispatcherServlet")]),e._v(" 根据请求信息调用 "),a("code",[e._v("HandlerMapping")]),e._v("，解析请求对应的 "),a("code",[e._v("Handler")])]),e._v(" "),a("li",[e._v("解析对应的 "),a("code",[e._v("Handler")]),e._v("，交由对应 "),a("code",[e._v("HandlerAdapter")]),e._v(" 适配器处理")]),e._v(" "),a("li",[a("code",[e._v("HandlerAdapter#handle(...)")]),e._v(" 处理目标请求，执行业务逻辑")]),e._v(" "),a("li",[e._v("处理器返回 "),a("code",[e._v("ModelAndView")]),e._v(" 对象通过适配器传递给"),a("code",[e._v("DispaterServlet")]),e._v("，其中"),a("code",[e._v("Model")]),e._v(" 是返回的数据对象，"),a("code",[e._v("View")]),e._v(" 为逻辑View")]),e._v(" "),a("li",[a("code",[e._v("ViewResolver")]),e._v(" 根据逻辑View查找实际 "),a("code",[e._v("View")])]),e._v(" "),a("li",[a("code",[e._v("DispaterServlet")]),e._v(" 将返回的 "),a("code",[e._v("Model")]),e._v(" 传给 "),a("code",[e._v("View")]),e._v("（视图渲染）")]),e._v(" "),a("li",[a("code",[e._v("DispaterServlet")]),e._v("将 "),a("code",[e._v("View")]),e._v(" 返回给请求者（浏览器）")])]),e._v(" "),a("div",{staticClass:"language-sequence extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("participant HttpServlet\nparticipant HttpServletBean\nparticipant FrameworkServlet\nparticipant DispatcherServlet\n\nnote over HttpServlet: doGet(req, res)/doPost(req, res)\nnote over FrameworkServlet: processRequest(req, res)\nnote over DispatcherServlet: doService(req, res) -> doDispatch(req, res)\n\n")])])]),a("h6",{attrs:{id:"dispatcherservlet-dodispatch-req-res"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatcherservlet-dodispatch-req-res"}},[e._v("#")]),e._v(" "),a("code",[e._v("DispatcherServlet.doDispatch(req, res)")])]),e._v(" "),a("ol",[a("li",[a("p",[a("code",[e._v("checkMultipart(req)")]),e._v("，判断是否为文件上传请求")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("getHandler(processedRequest)")]),e._v("，获取能处理当前请求的控制器/处理器（若没有符合条件的控制器/处理器，则重定向至404页面，除非用户在配置中显式要求抛出"),a("code",[e._v("NoHandlerFoundException")]),e._v("），其中包含请求所经过的拦截器信息"),a("code",[e._v("interceptorList")])]),e._v(" "),a("blockquote",[a("p",[e._v("该方法遍历"),a("code",[e._v("HandlerMapping[]")]),e._v("（处理器映射），获取控制器方法映射信息，构造"),a("code",[e._v("HandlerExecutionChain")]),e._v("对象返回")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// getHandler()")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// XXXHandlerMapping中保存有不同请求映射信息的(LinkedHashMap) handlerMap属性")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("handlerMapping hm"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("handlerMappings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ...")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HandlerExecutionChain")]),e._v(" handler "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" hm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// return handler")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("ul",[a("li",[e._v("（优先匹配）动态方法对应"),a("code",[e._v("DefaultAnnotationHandlerMapping")]),e._v("或"),a("code",[e._v("RequestMethodHandlerMapping")]),e._v("对，"),a("code",[e._v("handlerMap")]),e._v("/"),a("code",[e._v("urlMapping")]),e._v("属性中保存有控制器方法（动态方法）请求映射信息（"),a("code",[e._v("/xxx=XXXController@addr")]),e._v("），需要借助"),a("code",[e._v("<mvc:annotation-driven>")]),e._v("实现")]),e._v(" "),a("li",[e._v("静态资源对应"),a("code",[e._v("SimpleUrlHandlerMapping")]),e._v("对象，"),a("code",[e._v("handlerMap")]),e._v("属性中保存有（其他）请求的映射信息（"),a("code",[e._v("/**=DefaultServletHttpRequestHandler@addr")]),e._v("，即所有请求直接由Tomcat接管），需要借助"),a("code",[e._v("<mvc:default-servlet-handler>")]),e._v("实现")])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("getHandlerAdapter(mappedHandler.getHandler())")]),e._v("，获取能执行控制器方法的适配器"),a("code",[e._v("ha")])]),e._v(" "),a("blockquote",[a("p",[e._v("该方法从"),a("code",[e._v("HandlerAdapter[]")]),e._v("中遍历控制器方法适配器（"),a("code",[e._v("HttpRequestHandlerAdapter")]),e._v("/"),a("code",[e._v("SimpleControllerHandlerAdapter")]),e._v("/"),a("code",[e._v("AnnotationMethodHandlerAdapter")]),e._v("），如果适配器支持当前处理器，则返回该适配器")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("!mappedHandler.applyPreHandle(processedRequest, response)")]),e._v("，遍历"),a("code",[e._v("interceptorList")]),e._v("进行"),a("code",[e._v("preHandle()")]),e._v("方法调用（启用多个拦截器时，不论是否有拦截器不放行请求，已放行拦截器的"),a("code",[e._v("afterCompletion()")]),e._v("方法都会执行）")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("applyPreHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpServletRequest")]),e._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpServletResponse")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getInterceptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getInterceptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HandlerIntercoptor")]),e._v(" interceptor "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getInterceptors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("interceptor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("preHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("triggerAfterCompletion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("interceptorIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//\t已有i个拦截器正常执行")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("mv = ha.handle(processedRequest, response, mappedHandler.getHandler())")]),e._v("，适配器"),a("code",[e._v("ha")]),e._v("执行目标方法，返回"),a("code",[e._v("ModelAndView")]),e._v("对象（自动封装可能返回的视图名字符串）")]),e._v(" "),a("blockquote",[a("p",[e._v("目标控制器方法的反射执行流程：")]),e._v(" "),a("ol",[a("li",[a("p",[a("code",[e._v("ha.handle(processedRequest, response, mappedHandler.getHandler())")])]),e._v(" "),a("p",[e._v("判断是否标注有"),a("code",[e._v("SessionAttribute")]),e._v("注解，若存在则放入"),a("code",[e._v("SessionAttributeStore")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("invokeHandlerMethod(processedRequest, response, mappedHandler)")])]),e._v(" "),a("ol",[a("li",[e._v("获取当前处理器的"),a("code",[e._v("ServletHandlerMethodResolver")])]),e._v(" "),a("li",[e._v("通过方法解析器定位当前请求对应的控制器方法")]),e._v(" "),a("li",[e._v("创建"),a("code",[e._v("ServletHandlerMethodInvoker")]),e._v("和"),a("code",[e._v("BindingAwareModelMap")]),e._v("对象")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("HandlerMethodInvoker.invokeHandlerMethod(handlerMethod, handler, webRequest, implicitModel)")])]),e._v(" "),a("ol",[a("li",[a("p",[e._v("遍历所有"),a("code",[e._v("SessionAttribute")]),e._v("名，将"),a("code",[e._v("SessionAttributeStore")]),e._v("中存在的"),a("code",[e._v("SessionAttribute")]),e._v("放入"),a("code",[e._v("implicitModel")]),e._v("对象")])]),e._v(" "),a("li",[a("p",[e._v("遍历所有"),a("code",[e._v("ModelAttributeMethod")]),e._v("，获取"),a("code",[e._v("ModelAttributeMethod")]),e._v("方法的参数：")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" args "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("resolveHandlerArguments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("attributeMethodToInvoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" webRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" implicitModel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("ol",[a("li",[e._v("解析"),a("code",[e._v("@ModelAttribute")]),e._v("方法的参数（参见下一节加粗部分）")]),e._v(" "),a("li",[e._v("根据"),a("code",[e._v("@ModelAttribute")]),e._v("注解中"),a("code",[e._v("value")]),e._v("属性值确定"),a("code",[e._v("attrName")]),e._v("（若未显式配置该属性则赋值为方法返回值首字母小写字符串），并放入"),a("code",[e._v("implicitModel")]),e._v("对象")]),e._v(" "),a("li",[e._v("传入"),a("code",[e._v("args[]")]),e._v("数组，反射执行"),a("code",[e._v("@ModelAttribute")]),e._v("方法（"),a("code",[e._v("attributeMethodToInvoke")]),e._v("）")])])]),e._v(" "),a("li",[a("p",[e._v("再次调用"),a("code",[e._v("resolveHandlerArguments(attributeMethodToInvoke, handler, webRequest, implicitModel)")]),e._v("获取目标控制器方法的参数，并真正通过反射执行目标控制器方法")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("解析方法参数的流程（原始）：")])]),e._v(" "),a("ol",[a("li",[a("p",[e._v("创建"),a("code",[e._v("args[]")]),e._v("数组，长度为"),a("code",[e._v("method.getParameterTypes()")]),e._v("长度")])]),e._v(" "),a("li",[a("p",[e._v("遍历方法参数，尝试获取参数信息：")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("若标有注解，则对每一类型的注解分别进行判断，返回对应不同类型注解的成员变量")])]),e._v(" "),a("li",[a("p",[e._v("若某一参数没找到任何注解信息：")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("判断该参数是否为"),a("code",[e._v("Servlet")]),e._v("原生组件对象")])]),e._v(" "),a("li",[a("p",[e._v("判断是否为"),a("code",[e._v("Model")]),e._v("或"),a("code",[e._v("Map")]),e._v("实现类，若是则将"),a("code",[e._v("implicitModel")]),e._v("对象赋值给"),a("code",[e._v("args[]")]),e._v("对应元素")])]),e._v(" "),a("li",[a("p",[e._v("判断是否为其他类型的原生"),a("code",[e._v("api")]),e._v("（"),a("code",[e._v("SessionStatus")]),e._v("/"),a("code",[e._v("HttpEntity")]),e._v("/"),a("code",[e._v("Errors")]),e._v("）")])]),e._v(" "),a("li",[a("p",[e._v("判断该参数是否为简单类型（基本类型对象），若是则将"),a("code",[e._v("paramName")]),e._v("赋为空串")])]),e._v(" "),a("li",[a("p",[e._v("若参数为"),a("code",[e._v("POJO")]),e._v("类型，则将"),a("code",[e._v("attrName")]),e._v("赋为空串")]),e._v(" "),a("blockquote",[a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 将控制器方法的入参信息传递给WebDataBinderFactory工厂对象，创建DataBinder实例")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("WebDataBinder")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("resolveModelAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("attrName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" methodParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" implicitModel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" webRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 若attrName为空串，则赋值为参数类型首字母小写")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 将封装的参数对象赋值给bindObject返回")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("blockquote",[a("p",[e._v("封装"),a("code",[e._v("POJO")]),e._v("类型"),a("code",[e._v("bindObject")]),e._v("对象流程：")]),e._v(" "),a("ol",[a("li",[e._v("在"),a("code",[e._v("implicitModel")]),e._v("中寻找"),a("code",[e._v("key")]),e._v("为"),a("code",[e._v("attrName")]),e._v("的对象，若存在则赋值给"),a("code",[e._v("bindObject")]),e._v("返回")]),e._v(" "),a("li",[e._v("若该属性标注有"),a("code",[e._v("SessionAttribute")]),e._v("注解，则尝试从"),a("code",[e._v("Session")]),e._v("中获取"),a("code",[e._v("value")]),e._v("属性标注的对象或"),a("code",[e._v("key")]),e._v("为"),a("code",[e._v("attrName")]),e._v("的对象")]),e._v(" "),a("li",[e._v("否则利用反射创建名为"),a("code",[e._v("attrName")]),e._v("值的空"),a("code",[e._v("POJO")]),e._v("对象")])])]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("doBind(webDataBinder, webRequest, ...)")]),e._v("方法，使用请求参数对上述对象中的属性进行一一绑定")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("请求参数绑定流程")]),e._v("：")]),e._v(" "),a("ol",[a("li",[a("p",[a("code",[e._v("DataBinder")]),e._v("调用"),a("code",[e._v("ConversionService")]),e._v("对象进行数据类型转换与数据格式化，并进行入参对象的属性绑定")]),e._v(" "),a("blockquote",[a("p",[e._v("自定义类型转换器：")]),e._v(" "),a("ol",[a("li",[e._v("实现"),a("code",[e._v("Converter")]),e._v("接口")]),e._v(" "),a("li",[e._v("注册自定义"),a("code",[e._v("FormattingConversionServiceFactoryBean")])]),e._v(" "),a("li",[e._v("可在"),a("code",[e._v("<mvc:annotiation-driven>")]),e._v("属性中配置自定义的"),a("code",[e._v("ConversionService")])])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("DataBinder")]),e._v("调用多个"),a("code",[e._v("Validator")]),e._v("对象对已经完成属性绑定的入参对象进行数据合法性校验，数据绑定结果保存至"),a("code",[e._v("BindingResult")]),e._v("对象中")])])])])])])])]),e._v(" "),a("li",[a("p",[e._v("根据上一步返回的参数信息（标有注解时根据注解信息确定参数值，否则返回上一步中所得到的对象），将参数对象放入"),a("code",[e._v("args[]")]),e._v("的对应元素中")])])])]),e._v(" "),a("li",[a("p",[e._v("传入"),a("code",[e._v("args[]")]),e._v("数组，真正反射执行目标控制器方法")])])])])])])])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("mappedHandler.applyPostHandle(processedRequest, response, mv)")]),e._v(" 逆序执行（已完成的）拦截器的"),a("code",[e._v("postHandle()")]),e._v("方法")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)")]),e._v("，转发到目标页面")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("若有异常传入，先处理异常")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[e._v("mv "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("processHandlerException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 遍历所有HandlerExceptionHander进行异常解析")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("render(mv, req, res)")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("View view = resolveViewName(mv.getViewName, mv.getModelInternal, locale, req)")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("View view = viewResolver.resolveViewName(viewName, locale)")])]),e._v(" "),a("p",[e._v("遍历所有可用的视图解析器（默认即为"),a("code",[e._v("InternalResourceViewResolver")]),e._v("，优先级最低）根据视图名获取"),a("code",[e._v("View")]),e._v("对象（"),a("code",[e._v("RedirectView")]),e._v("/"),a("code",[e._v("InternalResourceView")]),e._v("）：")]),e._v(" "),a("ol",[a("li",[e._v("从"),a("code",[e._v("this.ViewCreationCache")]),e._v("中尝试获取"),a("code",[e._v("View")]),e._v("对象")]),e._v(" "),a("li",[a("code",[e._v("View view = createView(viewName, locale)")])]),e._v(" "),a("li",[e._v("进行实际的前后缀拼串过程")]),e._v(" "),a("li",[e._v("将"),a("code",[e._v("View")]),e._v("对象放入"),a("code",[e._v("this.ViewCreationCache")])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("view.render(mv.getModelInternal, req, res)")]),e._v(" 转发到目标页面")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" mergedModel "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("createMergedOutputModel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("prepareResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("renderMergedOutputModel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("mergedModel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 对需要在页面展示的ModelMap进行渲染")]),e._v("\n")])])]),a("blockquote",[a("p",[a("code",[e._v("renderMergedOutputModel(mergedModel, req, res)")]),e._v("：")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("exposeModelAsRequestAttribute(model, requetsToExpose)")]),e._v(" 将"),a("code",[e._v("model")]),e._v("中的各属性放入"),a("code",[e._v("request")]),e._v("中")]),e._v(" "),a("li",[e._v("获取视图地址和"),a("code",[e._v("Servlet")]),e._v("原生转发器（"),a("code",[e._v("RequestDispatcher")]),e._v("）")]),e._v(" "),a("li",[a("code",[e._v("requestDispatcher.forward(requestToExpose, response)")])])])])]),e._v(" "),a("li",[a("p",[e._v("若页面正常处理，执行"),a("code",[e._v("afterCompletion()")]),e._v("方法")])])])]),e._v(" "),a("li",[a("p",[e._v("若上述步骤出现异常，则在"),a("code",[e._v("catch")]),e._v("块执行"),a("code",[e._v("afterCompletion()")]),e._v("方法（"),a("code",[e._v("afterCompletion()")]),e._v("方法总会执行）")])])]),e._v(" "),a("h6",{attrs:{id:"mvc-annotation-driven"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc-annotation-driven"}},[e._v("#")]),e._v(" "),a("code",[e._v("<mvc:annotation-driven>")])]),e._v(" "),a("ul",[a("li",[e._v("自动注册"),a("code",[e._v("RequestMappingHandlerMapping")]),e._v("/"),a("code",[e._v("RequestMappingHandlerAdaptor")]),e._v("/"),a("code",[e._v("ExceptionHandlerExceptionResolver")]),e._v("三个组件")]),e._v(" "),a("li",[a("code",[e._v("AnnotationDrivenBeanDefinitionParser")]),e._v("解析"),a("code",[e._v("<mvc:annotation-driven>")]),e._v("标签")])]),e._v(" "),a("h6",{attrs:{id:"httpmessageconverter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httpmessageconverter"}},[e._v("#")]),e._v(" "),a("code",[e._v("HttpMessageConverter")])]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// HttpMessageConverter")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("canRead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MediaType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("canWrite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MediaType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nlist"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MediaType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getSupportedMediaTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("extends")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpInputMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 如@RequestBody封装对象流程")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MediaType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HttpOutputMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 如@ResponseBody返回数据")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);